name: hello-world

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize]

jobs:
  hello_world_job:
    name: hello-world
    runs-on: ubuntu-latest
    steps:
      - name: Say hello
        run: |
          echo "Hello World!"
      - name: Date
        run: |
          date
      - name: Directory
        run: |
          ls
  simple_deployment_pipeline:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Check for skip flag in commit message
        id: check_skip
        run: |
          COMMIT_MSG=$(git log -1 --pretty=%B)
          if echo "$COMMIT_MSG" | grep -q "#skip"; then
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi
      - uses: actions/setup-node@v4
        with:
          node-version: '20'
      - name: Install dependencies
        run: |
          npm install
      - name: Check style
        run: |
          npm run eslint
      - name: Build
        run: |
          npm run build
      - name: Run tests
        run: |
          npm test
      - name: Install Playwright browsers
        run: |
          npx playwright install
      - name: Run end-to-end tests
        run: |
          npm run test:e2e
      - name: Deploy to production
        if: success() && github.event_name == 'push' && steps.check_skip.outputs.skip == 'false'
        run: |
          echo "Deployment triggered"
          curl ${{ secrets.WEB_HOOK }}
      - name: Create status report
        run: |
          echo "## Workflow Status" >> $GITHUB_STEP_SUMMARY
          echo "✅ Build: Successful" >> $GITHUB_STEP_SUMMARY
          echo "✅ Tests: Passed" >> $GITHUB_STEP_SUMMARY
          echo "✅ Lint: No issues" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ steps.check_skip.outputs.skip }}" == "true" ]]; then
            echo "⏭️ Deployment: Skipped due to #skip in commit message" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "push" ]]; then
            echo "✅ Deployment: Triggered" >> $GITHUB_STEP_SUMMARY
          else
            echo "ℹ️ Deployment: Not triggered (not a push to main)" >> $GITHUB_STEP_SUMMARY
          fi
  tag_release:
      name: Tag Release
      needs: [simple_deployment_pipeline]
      runs-on: ubuntu-24.04
      permissions:
        contents: 'write' # Required to push new tags
      # Skip tagging if the commit message contains #skip for push events on the target branch
      if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && !contains(github.event.head_commit.message, '#skip') }}
      outputs:
        tag: ${{ steps.tag_version.outputs.tag }}
        changelog: ${{ steps.tag_version.outputs.changelog }}
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4.1.7
          with:
            fetch-depth: 0 # Required for changelog generation

        - name: Bump version and push tag
          id: tag_version
          uses: anothrNick/github-tag-action@1.73.0
          env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            TAG_PREFIX: v
            DEFAULT_BUMP: patch

        - name: Log new tag
          run: echo "New tag is ${{ steps.tag_version.outputs.tag }}"

  notify:
    name: Discord Notification
    needs: [simple_deployment_pipeline, tag_release]
    runs-on: ubuntu-24.04
    if: always() # This is key - it runs even if previous jobs fail
    steps:
      - name: Determine Status
        id: status_check
        run: |
          if [[ "${{ needs.simple_deployment_pipeline.result }}" == "failure" || "${{ needs.tag_release.result }}" == "failure" ]]; then
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "color=15548997" >> $GITHUB_OUTPUT
            echo "status_text=Failed" >> $GITHUB_OUTPUT
          else
            echo "status=success" >> $GITHUB_OUTPUT
            echo "color=5763719" >> $GITHUB_OUTPUT
            echo "status_text=Success" >> $GITHUB_OUTPUT
          fi

      - name: Send Discord notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}
          status: ${{ steps.status_check.outputs.status }}
          color: ${{ steps.status_check.outputs.color }}
          username: "GitHub Actions"
